# Generated by Django 5.2.6 on 2025-09-26 19:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectSite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('location_lat', models.DecimalField(decimal_places=6, max_digits=9)),
                ('location_lng', models.DecimalField(decimal_places=6, max_digits=9)),
                ('ecosystem_type', models.CharField(choices=[('MANGROVE', 'Mangrove'), ('SEAGRASS', 'Seagrass'), ('MARSH', 'Salt Marsh')], max_length=20)),
                ('area_ha', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PlantationRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_planted', models.DateField()),
                ('species', models.CharField(max_length=200)),
                ('number_of_plants', models.PositiveIntegerField()),
                ('uploaded_images', models.ImageField(blank=True, null=True, upload_to='plantation_images/')),
                ('verified', models.BooleanField(default=False)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('verified_date', models.DateTimeField(blank=True, null=True)),
                ('project_site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.projectsite')),
            ],
        ),
        migrations.CreateModel(
            name='CarbonCredit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('year', models.PositiveIntegerField()),
                ('credits_issued', models.DecimalField(decimal_places=2, max_digits=10)),
                ('txn_hash', models.CharField(max_length=64, unique=True)),
                ('issued_date', models.DateTimeField(auto_now_add=True)),
                ('plantation_record', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='registry.plantationrecord')),
                ('project_site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.projectsite')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('NGO', 'NGO'), ('COMMUNITY', 'Community'), ('ADMIN', 'Admin')], default='NGO', max_length=20)),
                ('organization', models.CharField(blank=True, max_length=200, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='projectsite',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.user'),
        ),
        migrations.AddField(
            model_name='plantationrecord',
            name='uploaded_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.user'),
        ),
        migrations.AddField(
            model_name='plantationrecord',
            name='verified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_records', to='registry.user'),
        ),
    ]
